효율성 탈락

function solution(n, works) {
    
    let tot = works.reduce((acc,cur) => acc + cur);
    
    if(tot < n){
        return 0;
    } 
    
    while(n > 0){
        let arr = maxSort(works);
        let num = arr[0] - 1;
        arr.shift();
        arr.push(num);
        works = arr;
        n--;
    }
    return works.reduce((acc,cur) => {
        return acc + cur**2;
    },0)

}

function maxSort(arr){
    return arr.sort((a,b) => b-a);
}

효율성 성공(최대 힙을 통해 구현)
function solution(n, works) {
    
    let tot = works.reduce((acc,cur) => acc + cur);
    
    if(tot <= n){
        return 0;
    } 
    
    let mh = new MaxHeap()
    works.forEach((el) => mh.insert(el))
    
    while(n > 0){
        let num = mh.extract()
        mh.insert(num-1)
        n--
        
    }
    return mh.container.reduce((acc,cur) => {
        return acc + cur**2
    },0)
    

}

class MaxHeap {
  constructor() {
    this.container = []
  }

  insert(data) {
    this.container.push(data);
    let idx = this.container.length - 1

    while (idx > 0) {
      const parentIdx = Math.floor((idx - 1) / 2)
      if (this.container[idx] <= this.container[parentIdx]) break

      const temp = this.container[idx]
      this.container[idx] = this.container[parentIdx]
      this.container[parentIdx] = temp
      idx = parentIdx
    }
  }

  extract() {
    const max = this.container[0]
    if (this.container.length === 1) {
      return this.container.pop()
    }

    this.container[0] = this.container.pop()
    let idx = 0
    const length = this.container.length

    while (true) {
      const leftChildIdx = idx * 2 + 1
      const rightChildIdx = idx * 2 + 2
      let swapIdx = idx

      if (leftChildIdx < length && this.container[leftChildIdx] > this.container[swapIdx]) {
        swapIdx = leftChildIdx
      }

      if (rightChildIdx < length && this.container[rightChildIdx] > this.container[swapIdx]) {
        swapIdx = rightChildIdx
      }

      if (swapIdx === idx) break

      const temp = this.container[idx]
      this.container[idx] = this.container[swapIdx]
      this.container[swapIdx] = temp
      idx = swapIdx
    }

    return max
  }
}