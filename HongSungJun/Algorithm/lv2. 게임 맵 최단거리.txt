function solution(maps) {
   const row = maps.length
   const column = maps[0].length
   const tX = row - 1
   const tY = column - 1
   const visited = Array.from(Array(row).fill(false), () => Array(column).fill(false))
    
    for(let i = 0; i < row;i++){
        for(let j = 0; j < column;j++){
            if(maps[i][j] === 1){
                visited[i][j] = true
            }
            else if(maps[i][j] === 0){
                visited[i][j] = false
            }
        }
    }
    
    let cur = [[0,0,1]]
    
    while(cur.length){
        const [x,y,count] = cur.shift()
        
        if(x > tX || y > tY || x < 0 || y < 0){
            continue
        }
        
        if(x === tX && y === tY){
            return count
        }
        
        if(x + 1 <= tX && visited[x+1][y] === true){
            cur.push([x+1,y,count+1])
            visited[x+1][y] = false
        }
        
        if(x - 1 >= 0 && visited[x-1][y] === true){
            cur.push([x-1,y,count+1])
            visited[x-1][y] = false
        }
        
        if(y + 1 <= tY && visited[x][y+1] === true){
            cur.push([x,y+1,count+1])
            visited[x][y+1] = false
        }
        
        if(y - 1 >= 0 && visited[x][y-1] === true){
            cur.push([x,y-1,count+1])
            visited[x][y-1] = false
        }
    }
    return -1
}

미리 맵의 구조를 참 거짓으로 표시를 해두고, 상하좌우로 움직이면서 타겟에 도착하면 그때의 카운트를 리턴